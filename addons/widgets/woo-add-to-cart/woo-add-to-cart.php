<?phpnamespace Elementor;use Elementor\Controls_Manager;use Elementor\Group_Control_Background;use Elementor\Group_Control_Css_Filter;use Elementor\Group_Control_Text_Shadow;use Elementor\Group_Control_Typography;use Elementor\Scheme_Color;use Elementor\Scheme_Typography;use Elementor\Utils;use Elementor\Widget_Base;use Elementor\Embed;use Elementor\Plugin;use WooCommerce\Functions;if ( ! defined( 'ABSPATH' ) ) exit; class Master_Woo_Add_To_Cart extends Widget_Base {		private static $product_id = null;    public function __construct( $data = [], $args = null ) {        parent::__construct( $data, $args );		wp_register_style('me-woo-add-to-cart-css', \MasterElements::widgets_url() . '/woo-add-to-cart/css/add-to-cart.css', false, \MasterElements::version);    }	public function get_style_depends()    {        return ['me-woo-add-to-cart-css'];    }    public function get_name() {        return 'woo-product-add-to-cart';    }    public function get_title() {        return __( 'Woo Add To Cart Button', 'masterelements' );    }    public function get_categories() {        return array( 'master-addons' );	}	public function get_icon() {        return 'eicon-product-add-to-cart';    }    protected function _register_controls() {                $this->start_controls_section(			'me_add_to_cart_section_content',			array(				'label' => __( 'Product Add to Cart', 'masterelements' ),				'tab' => Controls_Manager::TAB_STYLE,			)		);		$this->add_control(			'me_content_options',			[				'label' => __( 'Show Options', 'masterelements' ),				'type' => Controls_Manager::SELECT,				'default' => 'default',				'options' => [					'default' => __( 'Default', 'masterelements' ),					'hide_qty' => __( 'Hide Quantity Box', 'masterelements' ),				],			]		);		$this->end_controls_section();				$this->start_controls_section(			'me_add_to_cart_button_style',			[				'label' => __( 'Add To Cart Button', 'masterelements' ),				'tab' => Controls_Manager::TAB_STYLE,			]		);		$this->add_group_control(			Group_Control_Typography::get_type(),			[				'name' => 'typography',				'selector' => '{{WRAPPER}} a.single_add_to_cart_button, {{WRAPPER}} .single_add_to_cart_button',			]		);		$this->start_controls_tabs( 'tabs_button_style' );		$this->start_controls_tab(			'me_add_to_cart_tab_button_normal',			[				'label' => __( 'Normal', 'masterelements' ),			]		);		$this->add_control(			'me_add_to_cart_button_text_color',			[				'label' => __( 'Text Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'default' => '',				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button, {{WRAPPER}} .single_add_to_cart_button' => 'color: {{VALUE}};',				],			]		);		$this->add_control(			'me_add_to_cart_background_color',			[				'label' => __( 'Background Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button, {{WRAPPER}} .single_add_to_cart_button' => 'background-color: {{VALUE}};',				],			]		);		$this->add_control(			'me_add_to_cart_button_border_color',			[				'label' => __( 'Border Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'condition' => [					'border_border!' => '',				],				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button, {{WRAPPER}} .single_add_to_cart_button' => 'border-color: {{VALUE}};',				],			]		);		$this->end_controls_tab();		$this->start_controls_tab(			'me_add_to_cart_tab_button_hover',			[				'label' => __( 'Hover', 'masterelements' ),			]		);		$this->add_control(			'me_add_to_cart_hover_color',			[				'label' => __( 'Text Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button:hover, {{WRAPPER}} .single_add_to_cart_button:hover' => 'color: {{VALUE}};',				],			]		);		$this->add_control(			'me_add_to_cart_button_background_hover_color',			[				'label' => __( 'Background Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button:hover, {{WRAPPER}} .single_add_to_cart_button:hover' => 'background-color: {{VALUE}};',				],			]		);		$this->add_control(			'me_add_to_cart_button_hover_border_color',			[				'label' => __( 'Border Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'condition' => [					'border_border!' => '',				],				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button:hover, {{WRAPPER}} .single_add_to_cart_button:hover' => 'border-color: {{VALUE}};',				],			]		);		$this->end_controls_tab();		$this->end_controls_tabs();		$this->add_group_control(						Group_Control_Border::get_type(),			[				'name' => 'border',				'placeholder' => '1px',				'default' => '0',				'selector' => '{{WRAPPER}} .single_add_to_cart_button',				'separator' => 'before',			]		);		$this->add_control(			'me_add_to_cart_border_radius',			[				'label' => __( 'Border Radius', 'masterelements' ),				'type' => Controls_Manager::DIMENSIONS,				'size_units' => [ 'px', '%' ],				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button, {{WRAPPER}} .single_add_to_cart_button' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',				],			]		);		$this->add_group_control(			Group_Control_Box_Shadow::get_type(),			[				'name' => 'button_box_shadow',				'selector' => '{{WRAPPER}} .single_add_to_cart_button',			]		);		$this->add_responsive_control(			'me_add_to_cart_text_margin',			[				'label' => __( 'Margin', 'masterelements' ),				'type' => Controls_Manager::DIMENSIONS,				'size_units' => [ 'px', 'em', '%' ],				'selectors' => [					'{{WRAPPER}} .single_add_to_cart_button' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',				],			]		);				$this->add_responsive_control(			'me_add_to_cart_text_padding',			[				'label' => __( 'Padding', 'masterelements' ),				'type' => Controls_Manager::DIMENSIONS,				'size_units' => [ 'px', 'em', '%' ],				'selectors' => [					'{{WRAPPER}} a.single_add_to_cart_button, {{WRAPPER}} .single_add_to_cart_button' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',				],				'separator' => 'before',			]		);		$this->add_responsive_control(			'me_add_to_cart_align',			[				'label'        => __( 'Alignment', 'masterelements' ),				'type'         => Controls_Manager::CHOOSE,				'options'      => [					'left'   => [						'title' => __( 'Left', 'masterelements' ),						'icon'  => 'fa fa-align-left',					],					'center' => [						'title' => __( 'Center', 'masterelements' ),						'icon'  => 'fa fa-align-center',					],					'right'  => [						'title' => __( 'Right', 'masterelements' ),						'icon'  => 'fa fa-align-right',					],				],				'prefix_class' => 'elementor%s-align-',				'default'      => '',			]		);		$this->end_controls_section();		$this->start_controls_section(			'me_add_to_cart_section_quantity_style',			[				'label' => __( 'Quantity Input', 'masterelements' ),				'tab' => Controls_Manager::TAB_STYLE,			]		);		$this->add_group_control(			Group_Control_Typography::get_type(),			[				'name' => 'qty_typography',				'selector' => '{{WRAPPER}} .quantity input.qty',			]		);		$this->start_controls_tabs( 'tabs_quantity_style' );		$this->start_controls_tab(			'me_add_to_cart_tab_quantity_normal',			[				'label' => __( 'Normal', 'masterelements' ),			]		);		$this->add_control(			'me_add_to_cart_quantity_text_color',			[				'label' => __( 'Text Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'default' => '',				'selectors' => [					'{{WRAPPER}} .quantity input.qty, {{WRAPPER}} .quantity' => 'color: {{VALUE}};',				],			]		);		$this->add_control(			'me_add_to_cart_quantity_background_color',			[				'label' => __( 'Background Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'selectors' => [					'{{WRAPPER}} .quantity input.qty, {{WRAPPER}} .quantity' => 'background-color: {{VALUE}};',				],			]		);		$this->end_controls_tab();		$this->start_controls_tab(			'me_add_to_cart_tab_quantity_hover',			[				'label' => __( 'Hover', 'masterelements' ),			]		);		$this->add_control(			'me_add_to_cart_quantity_hover_color',			[				'label' => __( 'Text Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'selectors' => [					'{{WRAPPER}} .quantity:hover input.qty, {{WRAPPER}} .quantity:hover' => 'color: {{VALUE}};',				],			]		);		$this->add_control(			'me_add_to_cart_quantity_background_hover_color',			[				'label' => __( 'Background Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'selectors' => [					'{{WRAPPER}} .quantity:hover input.qty, {{WRAPPER}} .quantity:hover' => 'background-color: {{VALUE}};',				],			]		);		$this->add_control(			'me_add_to_cart_quantity_hover_border_color',			[				'label' => __( 'Border Color', 'masterelements' ),				'type' => Controls_Manager::COLOR,				'condition' => [					'quantity_border_border!' => '',				],				'selectors' => [					'{{WRAPPER}} .quantity:hover input.qty' => 'border-color: {{VALUE}};',				],			]		);		$this->end_controls_tab();		$this->end_controls_tabs();		$this->add_group_control(			Group_Control_Border::get_type(),			[				'name' => 'quantity_border',				'placeholder' => '1px',				'default' => '0',				'selector' => '{{WRAPPER}} .quantity input.qty',				'separator' => 'before',			]		);		$this->add_control(			'me_add_to_cart_quantity_border_radius',			[				'label' => __( 'Border Radius', 'masterelements' ),				'type' => Controls_Manager::DIMENSIONS,				'size_units' => [ 'px', '%' ],				'selectors' => [					'{{WRAPPER}} .quantity input.qty' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',				],			]		);		$this->add_group_control(			Group_Control_Box_Shadow::get_type(),			[				'name' => 'quantity_box_shadow',				'selector' => '{{WRAPPER}} .quantity input.qty',			]		);		$this->add_responsive_control(			'me_add_to_cart_quantity_margin',			[				'label' => __( 'Margin', 'masterelements' ),				'type' => Controls_Manager::DIMENSIONS,				'size_units' => [ 'px', 'em', '%' ],				'selectors' => [					'{{WRAPPER}} .quantity input.qty' => 'margin: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',				],			]		);		$this->add_responsive_control(			'me_add_to_cart_quantity_padding',			[				'label' => __( 'Padding', 'masterelements' ),				'type' => Controls_Manager::DIMENSIONS,				'size_units' => [ 'px', 'em', '%' ],				'selectors' => [					'{{WRAPPER}} .quantity input.qty' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',				],				'separator' => 'before',			]		);		$this->end_controls_section();	}    /**     * WooCommerce Actions and Filters Used in this Function     */	protected function render() {				$post_type = get_post_type();				$settings = $this->get_settings_for_display();				if( 'hide_qty' == $settings['me_content_options'] )		{			add_filter('woocommerce_quantity_input_args', 'woo_hide_quantity');		}		if ( 'product' == $post_type ) 		{			global $product;					echo '<div class="me-entry-summary">';					woocommerce_template_single_add_to_cart();					echo '</div>';				}		else  		{	    	echo '<div class="woocommerce"><div class="product"><div class="me-entry-summary"><form class="cart">';						if( 'hide_qty' != $settings['me_content_options'] ) 			{							echo '<div class="quantity">							<label class="screen-reader-text" for="quantity_5b199a6b7d6f6">Quantity</label>							<input type="number" id="quantity_5b199a6b7d6f6" class="input-text qty text" step="1" min="1" max="" name="quantity" value="1" title="Qty" size="4" pattern="[0-9]*" inputmode="numeric" aria-labelledby="">							</div>';						}						echo '<button type="submit" name="add-to-cart" value="null" class="single_add_to_cart_button button alt">Add to cart</button>						</form></div></div></div>';	    }    }}